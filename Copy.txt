const asyncHandler = require('express-async-handler');
const axios = require('axios');
const jwt = require('jsonwebtoken');
const CustomError = require('../utils/customError');
const constants = require('../utils/constants');
const env = require('../config/env');
const logger = require('../utils/logger');
const { handleAxiosError } = require('../utils/errorHandler');

const login = asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    throw new CustomError(
      constants.errorMessages.MISSING_FIELDS,
      constants.status.BAD_REQUEST
    );
  }

  try {
    // Send login request to Spring Boot API
    const response = await axios.post(`${env.SPRING_BOOT_API}/api/auth/login`, {
      email,
      password,
    });

    const userRole = response.data.role;

    // Ensure role is either ADMIN or EMPLOYEE
    if (!['ADMIN', 'EMPLOYEE'].includes(userRole)) {
      throw new CustomError('Invalid role returned from backend', constants.status.BAD_REQUEST);
    }

    // Generate JWT with single role
    const token = jwt.sign(
      {
        sub: email,
        role: userRole, // Fixed: single role instead of roles array
      },
      env.JWT_SECRET,
      { expiresIn: constants.JWT_EXPIRES_IN }
    );

    logger.info(`User ${email} logged in successfully`);

    res.status(constants.status.OK).json({
      accessToken: token,
      user: response.data,
    });
  } catch (error) {
    handleAxiosError(error, res);
  }
});

module.exports = { login };
