const asyncHandler = require('express-async-handler');
const axios = require('axios');
const jwt = require('jsonwebtoken');
const CustomError = require('../utils/customError');
const constants = require('../utils/constants');
const env = require('../config/env');
const logger = require('../utils/logger');
const { handleAxiosError } = require('../utils/errorHandler');
 
const login = asyncHandler(async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) {
    throw new CustomError(
      constants.errorMessages.MISSING_FIELDS,
      constants.status.BAD_REQUEST
    );
  }
  try {
    const response = await axios.post(`${env.SPRING_BOOT_API}/api/auth/login`, {
      email,
      password,
    });
    const userRole = response.data.role; // Get role from Spring Boot response
    const token = jwt.sign(
      { sub: email,
        role: userRole
       }, env.JWT_SECRET, {
      expiresIn: constants.JWT_EXPIRES_IN,
    });
    logger.info(`User ${email} logged in successfully`);
    res.status(constants.status.OK).json({
      accessToken: token,
      user: response.data,
    });
  } catch (error) {
    handleAxiosError(error, res);
  }
});
 
module.exports = { login };
 
