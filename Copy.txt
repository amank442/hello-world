Daily Learning Report

Date: 19th April 2025
Name: Aman Kumar
Learning Track: DevOps – Jenkins Pipelines
Topic Covered: Creating a Declarative Pipeline


---

1. Objective of the Day

To understand and create a Declarative Pipeline in Jenkins using a simple, structured syntax for defining the stages and steps of an automated build process.


---

2. Topics Covered in Detail

A. What is a Declarative Pipeline?

A Declarative Pipeline provides a structured and simpler syntax for defining Jenkins Pipelines.

It is defined in a Jenkinsfile (typically stored inside the source code repo).

Designed to make pipeline code more readable and manageable.



---

B. Basic Structure of a Declarative Pipeline

pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building...'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing...'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying...'
            }
        }
    }
}


---

C. Key Components


---

D. How to Create a Declarative Pipeline Job

1. Login to Jenkins Dashboard.


2. Create New Item → Pipeline → Enter Job Name → OK.


3. Pipeline Configuration:

In the Pipeline section, choose Pipeline script.

Paste the Declarative syntax (as shown above).



4. Save and Build Now.


5. Check Console Output to see logs from each stage.




---

E. Example: Clone and Build Example

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/amankumar/project-repo.git'
            }
        }
        stage('Build') {
            steps {
                sh 'npm install'
            }
        }
        stage('Test') {
            steps {
                sh 'npm test'
            }
        }
    }
}

Checkout: Pulls the repo from GitHub.

Build: Installs npm dependencies.

Test: Runs unit tests.



---

3. Activities Done

Created a new Jenkins Pipeline job.

Wrote a basic Declarative Pipeline to print messages.

Added a real Git checkout and build stage.

Experimented with different agent types (any, specific label).



---

4. Challenges Faced

Forgot to enclose pipeline {} properly at first, causing syntax errors.

Misplaced steps {} inside stages directly — corrected after checking documentation.

Minor issues with Git credentials when pulling private repos — learned to configure Jenkins Credentials.



---

5. Learnings & Takeaways

Declarative syntax is very organized and beginner-friendly compared to scripted pipelines.

Pipelines encourage Infrastructure as Code (IaC) — no more manual clicking.

Validation and indentation are crucial to avoid pipeline failures.
