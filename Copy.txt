Here’s your Daily Learning Report for today’s theoretical learning on Persistent Volumes (PV), Persistent Volume Claims (PVC), and Ingress in Kubernetes:


---

Daily Learning Report

Date: 23rd April 2025
Name: Aman Kumar
Learning Track: DevOps – Kubernetes Fundamentals
Topic Covered: PV, PVC, and Ingress in Kubernetes


---

1. Objective of the Day

To understand how Kubernetes handles persistent storage using PV and PVC and how Ingress manages external access to services using HTTP/HTTPS routing.


---

2. Topics Covered

A. Persistent Volumes (PV) and Persistent Volume Claims (PVC)

What is a PV (Persistent Volume)?

A cluster-level storage resource provisioned by an admin (or dynamically).

Abstracts the underlying storage (local, NFS, cloud).


What is a PVC (Persistent Volume Claim)?

A request for storage by a user/application.

Specifies required size, access mode, and storage class.


Lifecycle

1. Admin or dynamic provisioner creates a PV.


2. Developer creates a PVC requesting storage.


3. Kubernetes binds a suitable PV to the PVC.


4. PVC is used by Pods to mount the volume and store data.



Sample PVC YAML

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi


---

B. Ingress

What is Ingress?

A Kubernetes object that manages external access to services via HTTP/HTTPS.

Provides routing, SSL termination, and virtual hosting.


Ingress vs Service

Service (NodePort/LoadBalancer) exposes at a single IP/port.

Ingress exposes multiple services using URL paths or hostnames on a single IP.


Ingress Controller

A separate Pod that processes Ingress rules.

Examples: NGINX Ingress, Traefik, HAProxy.


Basic Ingress YAML

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-ingress
spec:
  rules:
    - host: myapp.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-service
                port:
                  number: 80


---

3. Activities Done

Studied theoretical aspects of PV, PVC, and Ingress.

Reviewed Kubernetes docs and architecture diagrams for persistent storage and ingress flow.



---

4. Learnings & Takeaways

PV/PVC separate storage provisioning from application logic.

PVC makes it easy to request and consume storage in a declarative way.

Ingress helps consolidate multiple service exposures behind a single domain or IP, improving efficiency and scalability.



---

5. Plan for Next Day

Perform hands-on tasks:

Create a PVC and mount it in a Pod.

Deploy an Ingress controller and configure Ingress rules for routing.




---

Would you like a diagram or practice checklist to help visualize PV/PVC and Ingress flows before trying hands-on?

