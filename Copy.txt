pipeline {
    agent any

    parameters {
        string(name: 'SERVICE_NAME', defaultValue: 'frontend', description: 'Image / repository name')
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'Docker Image Tag')
    }

    environment {
        NODE_HOME = tool name: 'NODEJS 20'
        DISABLE_ESLINT_PLUGIN = 'true'
        IMAGE_TAG = "${BUILD_NUMBER}" // Correct placement for env variable
        Local_Image = "${params.SERVICE_NAME}:${BUILD_NUMBER}"
        ACR_NAME = 'cicdmicrosvc1-d4g7c6aehxc5amfa'
        ACR_IMAGE = "cicdmicrosvc1-d4g7c6aehxc5amfa.azurecr.io/${params.SERVICE_NAME}:${BUILD_NUMBER}"
        KUBECONFIG = "${WORKSPACE}/kubeconfig"
    }

    stages {
        stage('Checkout code') {
            steps {
                git url: 'https://github.com/amank442/ci-cd-microsvc.git', branch: 'main'
            }
        }

        stage('Build React') {
            steps {
                dir('Client') {
                    sh "${NODE_HOME}/bin/npm install"
                    sh "${NODE_HOME}/bin/npm run build"
                }
            }
        }

        stage('Docker Build') {
            steps {
                sh "docker build -f Client/Dockerfile -t ${Local_Image} Client"
            }
        }

        stage('Trivy Scan') {
            steps {
                sh "trivy image --format table --severity CRITICAL,HIGH ${Local_Image}"
            }
        }

        stage('Tag for ACR') {
            steps {
                sh "docker tag ${Local_Image} ${ACR_IMAGE}"
            }
        }

        stage('Login to ACR') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'acr-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh "docker login ${ACR_NAME}.azurecr.io -u $USERNAME -p $PASSWORD"
                }
            }
        }

        stage('Push to ACR') {
            steps {
                sh "docker push ${ACR_IMAGE}"
            }
        }

        stage('Prepare K8s') {
            steps {
                withCredentials([file(credentialsId: 'aks-kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    sh 'rm -f $KUBECONFIG'
                    sh 'cp $KUBECONFIG_FILE $KUBECONFIG'
                }
            }
        }

        stage('Deploy to AKS') {
            steps {
                script {
                    sh "sed -i 's/tag/${IMAGE_TAG}/g' K8s/Frontend-Deployment.yaml"
                    sh "kubectl apply -f K8s/Frontend-Deployment.yaml"
                    sh "kubectl apply -f K8s/ingress.yaml"
                }
            }
        }
    }
}
