7Daily Learning Report

Date: 19th April 2025
Name: Aman Kumar
Learning Track: DevOps – Jenkins Pipelines
Topic Covered: Creating a Declarative Pipeline


---

1. Objective of the Day

To understand and create a Declarative Pipeline in Jenkins using a simple, structured syntax for defining the stages and steps of an automated build process.


---

2. Topics Covered in Detail

A. What is a Declarative Pipeline?

A Declarative Pipeline provides a structured and simpler syntax for defining Jenkins Pipelines.

It is defined in a Jenkinsfile (typically stored inside the source code repo).

Designed to make pipeline code more readable and manageable.



---

B. Basic Structure of a Declarative Pipeline

pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building...'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing...'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying...'
            }
        }
    }
}


---

C. Key Components


---

D. How to Create a Declarative Pipeline Job

1. Login to Jenkins Dashboard.


2. Create New Item → Pipeline → Enter Job Name → OK.


3. Pipeline Configuration:

In the Pipeline section, choose Pipeline script.

Paste the Declarative syntax (as shown above).



4. Save and Build Now.


5. Check Console Output to see logs from each stage.




---
Here’s your Daily Learning Report for Creating a Declarative Pipeline (for 19th April 2025):


---

Daily Learning Report

Date: 19th April 2025
Name: Aman Kumar
Learning Track: DevOps – Jenkins Pipelines
Topic Covered: Creating a Declarative Pipeline


---

1. Objective of the Day

To understand and create a Declarative Pipeline in Jenkins using a simple, structured syntax for defining the stages and steps of an automated build process.


---

2. Topics Covered in Detail

A. What is a Declarative Pipeline?

A Declarative Pipeline provides a structured and simpler syntax for defining Jenkins Pipelines.

It is defined in a Jenkinsfile (typically stored inside the source code repo).

Designed to make pipeline code more readable and manageable.



---

B. Basic Structure of a Declarative Pipeline

pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building...'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing...'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying...'
            }
        }
    }
}


---

C. Key Components


---

D. How to Create a Declarative Pipeline Job

1. Login to Jenkins Dashboard.


2. Create New Item → Pipeline → Enter Job Name → OK.


3. Pipeline Configuration:

In the Pipeline section, choose Pipeline script.

Paste the Declarative syntax (as shown above).



4. Save and Build Now.


5. Check Console Output to see logs from each stage.




---

E. Example: Clone and Build Example

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/amankumar/project-repo.git'
            }
        }
        stage('Build') {
            steps {
                sh 'npm install'
            }
        }
        stage('Test') {
            steps {
                sh 'npm test'
            }
        }
    }
}

Checkout: Pulls the repo from GitHub.

Build: Installs npm dependencies.

Test: Runs unit tests.



---

3. Activities Done

Created a new Jenkins Pipeline job.

Wrote a basic Declarative Pipeline to print messages.

Added a real Git checkout and build stage.

Experimented with different agent types (any, specific label).



---

4. Challenges Faced

Forgot to enclose pipeline {} properly at first, causing syntax errors.

Misplaced steps {} inside stages directly — corrected after checking documentation.

Minor issues with Git credentials when pulling private repos — learned to configure Jenkins Credentials.



---

5. Learnings & Takeaways

Declarative syntax is very organized and beginner-friendly compared to scripted pipelines.

Pipelines encourage Infrastructure as Code (IaC) — no more manual clicking.

Validation and indentation are crucial to avoid pipeline failures.



---

6. Plan for Next Day

Learn:

Parallel Stages in Declarative Pipeline

Post conditions (like always, success, failure)

Using parameters in pipelines (for dynamic builds)




---

Would you like me to also provide you a sample Jenkinsfile that you can directly upload and run?
(It can be a little more complex — like including a when condition or a post block!)


pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/amankumar/project-repo.git'
            }
        }
        stage('Build') {
            steps {
                sh 'npm install'
            }
        }
        stage('Test') {
            steps {
                sh 'npm test'
            }
        }
    }
}

Checkout: Pulls the repo from GitHub.

Build: Installs npm dependencies.

Test: Runs unit tests.



---

3. Activities Done

Created a new Jenkins Pipeline job.

Wrote a basic Declarative Pipeline to print messages.

Added a real Git checkout and build stage.

Experimented with different agent types (any, specific label).



---

4. Challenges Faced

Forgot to enclose pipeline {} properly at first, causing syntax errors.

Misplaced steps {} inside stages directly — corrected after checking documentation.

Minor issues with Git credentials when pulling private repos — learned to configure Jenkins Credentials.



---

5. Learnings & Takeaways

Declarative syntax is very organized and beginner-friendly compared to scripted pipelines.

Pipelines encourage Infrastructure as Code (IaC) — no more manual clicking.

Validation and indentation are crucial to avoid pipeline failures.



Sure! Here's the Key Components section written point-wise for you:


---

Key Components of a Declarative Pipeline

pipeline block:

The top-level block that defines the entire pipeline structure.

All other components are nested inside it.


agent block:

Specifies where the pipeline or a stage will run.

Example: agent any means run on any available agent/node.


stages block:

A container for one or more stages.

Organizes the pipeline into major phases like Build, Test, and Deploy.


stage block:

Defines a single stage inside stages.

Each stage represents a logical step in the CI/CD process.


steps block:

Contains the specific tasks or commands that need to be executed in a stage.

Examples: running shell scripts, building code, executing tests.


post block (optional):

Defines actions that should run at the end of the pipeline or a stage.

Example: sending notifications on build success or failure.


environment block (optional):

Used to set environment variables that will be available during the pipeline execution.


parameters block (optional):

Used to define user inputs when manually triggering a build (like selecting branch, environment, etc.).




---

Would you also like me to create a small mind map diagram if you want it even easier to visualize?
It’ll take just a minute!

