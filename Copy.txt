package com.example.ems.controller;

import com.example.ems.entity.LeaveRequest;
import com.example.ems.entity.User;
import com.example.ems.exception.LeaveValidationException;
import com.example.ems.exception.ResourceNotFoundException;
import com.example.ems.repository.UserRepository;
import com.example.ems.service.LeaveService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.time.LocalDate;
import java.util.List;

@RestController
@RequestMapping("/api/leaves")
public class LeaveController {

    private static final Logger logger = LoggerFactory.getLogger(LeaveController.class);

    @Autowired
    private LeaveService leaveService;

    @Autowired
    private UserRepository userRepository;

    //  1. Apply for leave
    @PostMapping("/apply")
    public LeaveRequest applyLeave(@RequestBody LeaveRequest leaveRequest, HttpServletRequest request) {
        String email = (String) request.getAttribute("email");
        logger.info("Applying leave for user: {}", email);
        return leaveService.applyLeave(email, leaveRequest);
    }

    //  2. Approve leave by ID
    @PutMapping("/approve/{id}")
    public LeaveRequest approveLeave(@PathVariable Long id) {
        logger.info("Approving leave with ID: {}", id);
        return leaveService.approveLeave(id);
    }

    //  3. Reject leave by ID
    @PutMapping("/reject/{id}")
    public LeaveRequest rejectLeave(@PathVariable Long id) {
        logger.info("Rejecting leave with ID: {}", id);
        return leaveService.rejectLeave(id);
    }

    //  4. Get all leaves for admin
    @GetMapping("/all")
    public List<LeaveRequest> getAllLeaves(HttpServletRequest request) {
        String email = (String) request.getAttribute("email");
        logger.info("Fetching all leave requests for admin: {}", email);
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new ResourceNotFoundException("User not found with email: " + email));
        if (!user.getRole().equals("ADMIN")) {
            logger.error("User {} is not authorized to access all leave requests", email);
            throw new LeaveValidationException("Only admins can access all leave requests.");
        }
        return leaveService.getAllLeaves();
    }

    //  5. Get current user's leave history
    @GetMapping("/history")
    public List<LeaveRequest> getLeaveHistory(HttpServletRequest request) {
        String email = (String) request.getAttribute("email");
        logger.info("Fetching leave history for user: {}", email);
        return leaveService.getLeaveHistory(email);
    }

    //  6. Get all pending leave requests (admin)
    @GetMapping("/pending")
    public List<LeaveRequest> getPendingLeaves(HttpServletRequest request) {
        String email = (String) request.getAttribute("email");
        logger.info("Fetching pending leave requests for admin: {}", email);
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new ResourceNotFoundException("User not found with email: " + email));
        if (!user.getRole().equals("ADMIN")) {
            logger.error("User {} is not authorized to access pending leave requests", email);
            throw new LeaveValidationException("Only admins can access pending leave requests.");
        }
        return leaveService.getPendingLeaves();
    }

    //  7. Get leaves applied in a date range (admin)
    @GetMapping("/applied-range")
    public List<LeaveRequest> getLeavesByDateRange(
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
            HttpServletRequest request) {

        String email = (String) request.getAttribute("email");
        logger.info("Fetching leave applications for admin: {} between {} and {}", email, startDate, endDate);
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new ResourceNotFoundException("User not found with email: " + email));

        if (!user.getRole().equals("ADMIN")) {
            logger.error("User {} is not authorized to access leave applications by date range", email);
            throw new LeaveValidationException("Only admins can access leave applications by date range.");
        }
        return leaveService.getLeavesByDateRange(startDate, endDate);
    }

    //  8. Get current user's currently active leave requests
    @GetMapping("/current")
    public List<LeaveRequest> getCurrentLeaves(HttpServletRequest request) {
        String email = (String) request.getAttribute("email");
        logger.info("Fetching current leaves for user: {}", email);
        return leaveService.getCurrentLeaves(email);
    }
}
