/*Full-screen layout with increased height */
.approval-container {
  background-color: #f7f9fc;
  width: 100vw;
  height: 120vh;
  padding: 40px;
  display: flex;
  flex-direction: column;
  align-items: center;
}
 
/* Styled heading */
.approval-heading {
  font-size: 26px;
  font-weight: bold;
  color: #2a5298;
  margin-bottom: 25px;
}
 
/*Card styling */
.approval-card {
  background: white;
  padding: 30px;
  border-radius: 12px;
  box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.15);
  width: 90%;
  max-width: 1000px;
  height: 100vh;
}
 
/* Styled table */
.approval-table {
  width: 100%;
  border-collapse: collapse;
 
}
 
.approval-table thead {
  background: linear-gradient(to right, #2a5298, #4a90e2);
  color: white;
}
 
.approval-table th, .approval-table td {
  padding: 14px;
  text-align: center;
}
 
/*Button Styling */
.btn-approve {
  background-color: green !important;
  color: white;
  padding: 10px 16px;
  border-radius: 6px;
}
 
.btn-decline {
  background-color: red !important;
  color: white;
  padding: 10px 16px;
  border-radius: 6px;
}
 
/*Modal Styling */
.approval-modal {
  position: fixed;
  top: 5%;
  right: 5%;
  width: 300px;
}
 
.approval-modal-content {
  border-radius: 10px;
  padding: 20px;
}
 
.approval-modal-header {
  background: #dc3545;
  color: white;
}
 
/* Close button turns blue when reason is added */
.btn-close.blue {
  background-color: blue !important;
  color: white;
}
/*  Increase the height of the table container */
.table-containers {
  height: 60vh; /* Adjust as needed */
  overflow-y: auto;
  padding: 20px;
}
 
/*  Center and enlarge pending leave request text */
.approval-title {
  font-size: 28px; /* Increase font size */
  font-weight: bold;
  text-align: center; /* Center the text */
  margin-bottom: 20px;
}
/* Reduce button size and align them side by side */
.btn-approve, .btn-decline {
  font-size: 14px; /* Smaller font size */
  padding: 6px 12px; /* Reduce padding */
  display: inline-block;
  margin-right: 8px; /* Space between buttons */
}
import { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchPendingLeaves, approveLeave, declineLeave } from '../redux/actions/leaveActions';
import { getToken, getPendingLeaves, getLeaveLoading } from '../redux/selectors';
import '../css/Approval.css';
 
const Approval = () => {
  const [declineReason, setDeclineReason] = useState('');
  const [selectedLeaveId, setSelectedLeaveId] = useState(null);
  const [reasonEntered, setReasonEntered] = useState(false);
 
  const dispatch = useDispatch();
  const token = useSelector(getToken);
  const pendingLeaves = useSelector(getPendingLeaves);
  const loading = useSelector(getLeaveLoading);
 
  useEffect(() => {
    dispatch(fetchPendingLeaves(token));
  }, [dispatch, token]);
 
  const handleApprove = (leaveId) => {
    dispatch(approveLeave(leaveId, token));
  };
 
  const handleDecline = (leaveId) => {
    if (!declineReason) {
      alert('Please provide a reason for declining');
      return;
    }
    dispatch(declineLeave(leaveId, declineReason, token));
    setDeclineReason('');
    setSelectedLeaveId(null);
    setReasonEntered(false);
  };
 
  return (
    <div className="approval-container">
      <h2 className="approval-heading">Leave Approval</h2>
      <div className="approval-card">
        <h5 className="approval-title">Pending Leave Requests</h5>
        <div className="table-containers">
          <table className="approval-table">
            <thead>
              <tr>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Category</th>
                <th>Reason</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {pendingLeaves.length === 0 ? (
                <tr>
                  <td colSpan="7" className="no-leaves">No pending leave requests</td>
                </tr>
              ) : (
                pendingLeaves.map((leave) => (
                  <tr key={leave.id}>
                    <td>{leave.firstname}</td>
                    <td>{leave.lastname}</td>
                    <td>{leave.startDate}</td>
                    <td>{leave.endDate}</td>
                    <td>{leave.category}</td>
                    <td>{leave.reason}</td>
                    <td>
                      <button className="btn btn-approve" onClick={() => handleApprove(leave.id)} disabled={loading}>
                        Approve
                      </button>
                      <button className="btn btn-decline" onClick={() => setSelectedLeaveId(leave.id)} disabled={loading}>
                        Decline
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
 
      {/* Modal for Decline Reason (Appears at Top Right) */}
      {selectedLeaveId !== null && (
        <div className="approval-modal">
          <div className="modal-dialog">
            <div className="modal-content approval-modal-content">
              <div className="modal-header approval-modal-header">
                <h5 className="modal-title">Decline Leave</h5>
                <button type="button" className={`btn-close ${reasonEntered ? 'blue' : ''}`} onClick={() => setSelectedLeaveId(null)}></button>
              </div>
              <div className="modal-body">
                <div className="mb-3">
                  <label className="form-label">Reason for Decline</label>
                  <textarea
                    className="form-control approval-textarea"
                    value={declineReason}
                    onChange={(e) => {
                      setDeclineReason(e.target.value);
                      setReasonEntered(e.target.value.trim() !== '');
                    }}
                    required
                  />
                </div>
              </div>
              <div className="modal-footer">
                <button type="button" className="btn btn-secondary" onClick={() => setSelectedLeaveId(null)}>Close</button>
                <button type="button" className="btn btn-danger" onClick={() => handleDecline(selectedLeaveId)}>Decline</button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
 
export default Approval;
